version: 2.1

orbs:
  hmpps: ministryofjustice/hmpps@7

executor:
  &executor
  executor:
    name: hmpps/java
    tag: "19.0"
  environment:
    # Setting max gradle workers to 1 (which means 1 running concurrently, not max 1!) - because although this doesn't stop the ktlint workers from starting it does seem to prevent the test executor from needing as much memory.
    _JAVA_OPTIONS: -Xmx1280m -XX:ParallelGCThreads=2 -XX:ConcGCThreads=2
      -XX:ParallelGCThreads=2
      -Djava.util.concurrent.ForkJoinPool.common.parallelism=2
      -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-XX:+UseContainerSupport
      -Dkotlin.compiler.execution.strategy=in-process -Dorg.gradle.workers.max=1

jobs:
  check:
    <<: *executor
    steps:
      - run:
          command: |
            while true; do
              sleep 5
              ps auxwwf
              echo "======"
            done
          background: true
      - checkout
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "build.gradle.kts" }}
      - run: ./gradlew check
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "build.gradle.kts" }}
          paths:
            - /home/circleci/.gradle/caches
      - store_test_results:
          path: build/test-results
      - store_test_results:
          path: build/serenity
      - store_artifacts:
          path: build/libs
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  test-integration:
    <<: *executor
    steps:
      - checkout
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "build.gradle.kts" }}
      - run: ./gradlew -Dorg.gradle.jvmargs="--illegal-access=permit"
          -Dkotlin.daemon.jvm.options="--illegal-access=permit" testIntegration
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "build.gradle.kts" }}
          paths:
            - /home/circleci/.gradle/caches
      - store_test_results:
          path: build/test-results
      - store_test_results:
          path: build/serenity
      - store_artifacts:
          path: build/libs
    # The resource_class feature allows configuring CPU and RAM resources for each job. Different resource classes are available for different executors. https://circleci.com/docs/2.0/configuration-reference/#resourceclass
    resource_class: large
  test-schema-nomis:
    <<: *executor
    steps:
      - checkout
      - restore_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: gradle-cache-{{ checksum "build.gradle.kts" }}
      - run: ./gradlew -Dorg.gradle.jvmargs="--illegal-access=permit"
          -Dkotlin.daemon.jvm.options="--illegal-access=permit"
          testWithSchemaNomis
      - save_cache:
          key: gradle-wrapper-{{ checksum "gradle/wrapper/gradle-wrapper.properties" }}
          paths:
            - /home/circleci/.gradle/wrapper
      - save_cache:
          key: gradle-cache-{{ checksum "build.gradle.kts" }}
          paths:
            - /home/circleci/.gradle/caches
      - store_test_results:
          path: build/test-results
      - store_test_results:
          path: build/serenity
      - store_artifacts:
          path: build/libs

workflows:
  version: 2
  build-test-and-deploy:
    jobs:
      - check:
          filters:
            tags:
              ignore: /.*/
      - test-integration:
          filters:
            tags:
              ignore: /.*/
      - test-schema-nomis:
          filters:
            tags:
              ignore: /.*/
      - hmpps/build_multiplatform_docker:
          name: build_docker
          filters:
            branches:
              only:
                - main
      - hmpps/deploy_env:
          name: deploy_dev
          env: "t3"
          jira_update: true
          context:
            - hmpps-common-vars
          filters:
            branches:
              only:
                - main
          requires:
            - build_docker
            - check
            - test-integration
            - test-schema-nomis
      - request-preprod-approval:
          type: approval
          requires:
            - deploy_dev

      - hmpps/deploy_env:
          name: deploy_preprod
          env: "preprod"
          jira_update: true
          jira_env_type: staging
          context:
            - hmpps-common-vars
            - prison-api-preprod
          requires:
            - request-preprod-approval
      - request-prod-approval:
          type: approval
          requires:
            - deploy_preprod

      - hmpps/deploy_env:
          name: deploy_prod
          env: "prod"
          jira_update: true
          jira_env_type: production
          slack_notification: true
          context:
            - hmpps-common-vars
            - prison-api-prod
          requires:
            - request-prod-approval
  security:
    triggers:
      - schedule:
          cron: "46 6 * * 1-5"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/gradle_owasp_dependency_check:
          context:
            - hmpps-common-vars
          cache_key: "v2_0"
      - hmpps/trivy_latest_scan:
          context:
            - hmpps-common-vars
      - hmpps/veracode_pipeline_scan:
          context:
            - hmpps-common-vars
            - veracode-credentials
  security-weekly:
    triggers:
      - schedule:
          cron: "51 5 * * 1"
          filters:
            branches:
              only:
                - main
    jobs:
      - hmpps/veracode_policy_scan:
          context:
            - veracode-credentials
            - hmpps-common-vars
